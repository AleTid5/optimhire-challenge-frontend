{"version":3,"sources":["components/card/index.tsx","components/form/input/index.tsx","components/form/button/index.tsx","components/notification/error-notification.tsx","contexts/app.context.tsx","pages/login/index.tsx","components/with-authenticated-login/index.tsx","components/tabs/index.tsx","enums/crypto-currency.enum.ts","pages/cryptocurrencies/context/crypto-currency.context.tsx","pages/cryptocurrencies/components/crypto-currency-grid/index.tsx","components/custom-hooks/use-crypto-api/sources/coingecko.source.ts","components/custom-hooks/use-crypto-api/sources/storm-gain.source.ts","components/custom-hooks/use-crypto-api/sources/crypto-compare.source.ts","components/custom-hooks/use-crypto-api/index.tsx","components/custom-hooks/use-interval/index.tsx","pages/cryptocurrencies/components/crypto-currency-grid/skeleton.tsx","components/error-card/index.tsx","pages/cryptocurrencies/components/currency-converter/index.tsx","components/modal/index.tsx","assets/icons/logout.icon.tsx","components/logout/index.tsx","assets/icons/user.icon.tsx","components/user-information/index.tsx","components/navbar/index.tsx","pages/cryptocurrencies/index.tsx","pages/routes.ts","pages/index.tsx","components/background/index.tsx","index.tsx"],"names":["Card","children","className","backgroundColor","Input","type","title","value","onChange","newValue","target","autoComplete","Button","onClick","size","ErrorNotification","errors","length","role","map","error","key","AppContext","createContext","user","isUserLogged","authenticate","T","logout","Provider","AppProvider","useState","setUser","useEffect","savedUser","localStorage","getItem","JSON","parse","setItem","stringify","removeItem","useAppContext","context","useContext","Error","Login","history","useHistory","name","setName","lastname","setLastname","email","setEmail","phoneNumber","setPhoneNumber","setErrors","issues","push","test","isEmailValid","isNaN","Number","withAuthenticatedLogin","Component","props","Tabs","tabs","activeTab","setActiveTab","tab","CryptoCurrency","CryptoCurrencyContext","results","lastCryptoValues","updateLastCryptoValues","CryptoCurrencyProvider","cryptoCurrenciesProviders","setCryptoCurrenciesProviders","setLastCryptoValues","mergedCryptoCurrenciesProviders","provider","cryptoCurrencies","useCryptoCurrencyContext","CryptoCurrencyGrid","cryptoCurrencyName","cryptoCurrencyProviders","useMemo","filter","cryptoCurrencyResult","getParsedCurrency","toLocaleString","lastUpdated","cryptoCurrencyProvider","cryptoCurrency","CoingeckoSource","a","axios","get","params","vs_currency","ids","data","BTC","ETH","XRP","current_price","moment","last_updated","format","currency","StormGainSource","BTC_USDT","ETH_USDT","XRP_USDT","parseFloat","last_price","Date","CryptoCompareSource","tsyms","fsyms","USD","useCryptoApi","setError","isLoading","setIsLoading","setResults","callback","delay","savedCallback","useRef","current","tick","id","setInterval","clearInterval","useInterval","Promise","all","CryptoCurrencyGridSkeleton","color","highlightColor","Array","fill","_v","count","ErrorCard","CurrencyConverter","undefined","setValue","lastCryptoValue","toString","toFixed","Modal","visible","subtitle","primaryButton","secondaryButton","icon","action","LogoutIcon","focusable","viewBox","height","width","d","Logout","isModalOpened","setIsModalOpened","UserIcon","version","xmlns","x","y","UserInformation","isModalVisible","setIsModalVisible","Navbar","routes","path","component","Pages","exact","Background","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb7a05ed.chunk.js","sourcesContent":["import { ReactNode } from \"react\";\n\ninterface CardProps {\n  children: ReactNode;\n  className?: string;\n  backgroundColor?: string;\n}\n\nexport default function Card({\n  children,\n  className,\n  backgroundColor = \"bg-gray-700\",\n}: CardProps) {\n  return (\n    <div\n      className={`relative w-full h-auto max-w-md sm:max-w-2xl md:max-w-3xl lg:max-w-4xl p-8 rounded-lg shadow-2xl ${backgroundColor} ${\n        className ?? \"\"\n      }`}\n    >\n      {children}\n    </div>\n  );\n}\n","import { Dispatch, SetStateAction } from \"react\";\n\ninterface InputProps {\n  type?: string;\n  title?: string;\n  className?: string;\n  value: any;\n  onChange: Dispatch<SetStateAction<any>>;\n}\n\nexport default function Input({\n  className,\n  type = \"text\",\n  title,\n  value,\n  onChange,\n}: InputProps) {\n  return (\n    <div className={className ?? \"\"}>\n      {title && (\n        <div className=\"text-gray-400 uppercase text-xs font-bold ml-3 mb-1\">\n          {title}\n        </div>\n      )}\n      <input\n        value={value}\n        type={type}\n        className=\"bg-gray-400 rounded-xl p-2 w-full text-white focus:outline-none focus:ring-2 focus:ring-yellow-300 focus:border-transparent\"\n        onChange={({ target: { value: newValue } }) => onChange(newValue)}\n        autoComplete=\"off\"\n      />\n    </div>\n  );\n}\n","interface ButtonProps {\n  title: string;\n  className?: string;\n  onClick?: () => void;\n  type?: \"submit\" | \"button\";\n  size?: string;\n}\n\nexport default function Button({\n  className,\n  title,\n  onClick,\n  type = \"button\",\n  size = \"w-full\",\n}: ButtonProps) {\n  return (\n    <button\n      className={`bg-yellow-300 hover:bg-yellow-400 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-opacity-50 py-3 rounded-lg text-gray-600 font-bold uppercase mt-8 ${className} ${size}`}\n      onClick={onClick}\n      type={type}\n    >\n      {title}\n    </button>\n  );\n}\n","interface ErrorNotificationProps {\n  title?: string;\n  errors: Array<string>;\n}\n\nexport default function ErrorNotification({\n  title = \"Error!\",\n  errors = [],\n}: ErrorNotificationProps) {\n  if (errors.length === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"absolute top-0 right-0 bg-red-100 border-l-4 border-red-500 text-red-700 p-4 m-8\"\n      role=\"alert\"\n    >\n      <p className=\"font-bold\">{title}</p>\n      <ul className=\"list-disc ml-4\">\n        {errors.map((error, key) => (\n          <li key={key}>{error}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import { createContext, useContext, useEffect, useState } from \"react\";\nimport {\n  AppContextInterface,\n  AppProviderInterface,\n} from \"../interfaces/app-context.interface\";\nimport { UserInterface } from \"../interfaces/user.interface\";\n\nconst AppContext = createContext({\n  user: null,\n  isUserLogged: () => false,\n  authenticate: (T: UserInterface) => {},\n  logout: () => {},\n} as AppContextInterface);\n\nconst { Provider } = AppContext;\n\nexport const AppProvider = ({ children }: AppProviderInterface) => {\n  const [user, setUser] = useState<UserInterface | null>(null);\n\n  const authenticate = (user: UserInterface) => {\n    setUser(user);\n    localStorage.setItem(\"user\", JSON.stringify(user));\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"user\");\n  };\n\n  const isUserLogged = () => localStorage.getItem(\"user\") !== null;\n\n  useEffect(() => {\n    const savedUser = localStorage.getItem(\"user\");\n\n    if (savedUser !== null) {\n      setUser(JSON.parse(savedUser) as UserInterface);\n    }\n  }, []);\n\n  return (\n    <Provider value={{ user, isUserLogged, authenticate, logout }}>\n      {children}\n    </Provider>\n  );\n};\n\nexport const useAppContext = () => {\n  const context = useContext(AppContext);\n\n  if (!context) {\n    throw new Error(\"useAppContext must be used within a AppProvider\");\n  }\n\n  return context;\n};\n","import Card from \"../../components/card\";\nimport Input from \"../../components/form/input\";\nimport { useEffect, useState } from \"react\";\nimport Button from \"../../components/form/button\";\nimport ErrorNotification from \"../../components/notification/error-notification\";\nimport { useAppContext } from \"../../contexts/app.context\";\nimport { UserInterface } from \"../../interfaces/user.interface\";\nimport { useHistory } from \"react-router-dom\";\n\nconst isEmailValid = (email: string) => /\\S+@\\S+\\.\\S+/.test(email);\n\nexport default function Login() {\n  const history = useHistory();\n  const { authenticate, logout } = useAppContext();\n  const [name, setName] = useState<string>(\"\");\n  const [lastname, setLastname] = useState<string>(\"\");\n  const [email, setEmail] = useState<string>(\"\");\n  const [phoneNumber, setPhoneNumber] = useState<string>(\"\");\n  const [errors, setErrors] = useState<Array<string>>([]);\n\n  useEffect(() => {\n    logout();\n  }, [logout]);\n\n  const onSubmit = () => {\n    const issues = [];\n\n    if (name.length < 3) {\n      issues.push(\"Name should have at least 3 characters\");\n    }\n\n    if (lastname.length < 3) {\n      issues.push(\"Lastname should have at least 3 characters\");\n    }\n\n    if (!isEmailValid(email)) {\n      issues.push(\"E-Mail format is invalid\");\n    }\n\n    if (phoneNumber.length < 6 || isNaN(Number(phoneNumber))) {\n      issues.push(\"Phone number is invalid\");\n    }\n\n    setErrors(issues);\n\n    if (issues.length === 0) {\n      authenticate({\n        name,\n        lastname,\n        email,\n        phoneNumber: Number(phoneNumber),\n      } as UserInterface);\n      history.push(\"/cryptocurrencies\");\n    }\n  };\n\n  return (\n    <>\n      <div className=\"flex items-center justify-center h-screen px-4\">\n        <Card>\n          <div className=\"flex justify-center\">\n            <div className=\"absolute bg-gray-500 w-16 h-16 rounded-full -top-8\" />\n          </div>\n          <div className=\"grid sm:grid-cols-2 gap-4 mt-4\">\n            <Input title=\"Name\" value={name} onChange={setName} />\n            <Input title=\"Lastname\" value={lastname} onChange={setLastname} />\n            <Input\n              type=\"email\"\n              title=\"Email\"\n              className=\"sm:col-span-2\"\n              value={email}\n              onChange={setEmail}\n            />\n            <Input\n              title=\"Phone Number\"\n              type=\"number\"\n              className=\"sm:col-span-2\"\n              value={phoneNumber}\n              onChange={setPhoneNumber}\n            />\n          </div>\n          <div className=\"flex justify-center\">\n            <Button\n              className=\"mt-8\"\n              size=\"w-96\"\n              title=\"Submit\"\n              onClick={onSubmit}\n            />\n          </div>\n        </Card>\n      </div>\n      <ErrorNotification errors={errors} />\n    </>\n  );\n}\n","import { FunctionComponent, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAppContext } from \"../../contexts/app.context\";\n\nconst withAuthenticatedLogin =\n  (Component: FunctionComponent) => (props: any) => {\n    const history = useHistory();\n    const { user, isUserLogged } = useAppContext();\n\n    useEffect(() => {\n      if (!isUserLogged()) {\n        history.push(\"/login\");\n      }\n    }, [history, isUserLogged, user]);\n\n    return <Component {...props} />;\n  };\n\nexport default withAuthenticatedLogin;\n","import { ReactNode, useState } from \"react\";\n\ninterface TabsProps {\n  children: Array<ReactNode>;\n  tabs: Array<string>;\n  className?: string;\n}\n\nexport default function Tabs({ children, className, tabs }: TabsProps) {\n  const [activeTab, setActiveTab] = useState(0);\n\n  return (\n    <>\n      <div className={`border-b-2 border-yellow-300 ${className}`}>\n        <ul className=\"flex cursor-pointer\">\n          {tabs.map((tab, key) => (\n            <li\n              className={`py-1.5 px-6 bg-white rounded-t-xl ml-2 font-bold ${\n                activeTab === key\n                  ? \"bg-yellow-300 text-gray-600\"\n                  : \"bg-gray-100 text-gray-500 hover:bg-yellow-100\"\n              }`}\n              key={key}\n              onClick={() => setActiveTab(key)}\n            >\n              {tab}\n            </li>\n          ))}\n        </ul>\n      </div>\n      {children[activeTab]}\n    </>\n  );\n}\n","export enum CryptoCurrency {\n  BTC = \"BTC\",\n  ETH = \"ETH\",\n  XRP = \"XRP\",\n}\n","import {\n  createContext,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { CryptoCurrencyInterface } from \"../../../interfaces/crypto-currency.interface\";\n\ninterface CryptoCurrencyProviderProps {\n  children: ReactNode;\n  results: CryptoCurrencyInterface[][];\n}\n\ninterface CryptoCurrencyContextInterface {\n  results: CryptoCurrencyInterface[][];\n  lastCryptoValues: CryptoCurrencyInterface[];\n  updateLastCryptoValues: (cryptoCurrencies: CryptoCurrencyInterface[]) => void;\n}\n\nconst CryptoCurrencyContext = createContext({\n  results: [],\n  lastCryptoValues: [],\n  updateLastCryptoValues: () => {},\n} as CryptoCurrencyContextInterface);\n\nconst { Provider } = CryptoCurrencyContext;\n\nexport const CryptoCurrencyProvider = ({\n  children,\n  results,\n}: CryptoCurrencyProviderProps) => {\n  const [cryptoCurrenciesProviders, setCryptoCurrenciesProviders] = useState<\n    CryptoCurrencyInterface[][]\n  >([]);\n  const [lastCryptoValues, setLastCryptoValues] = useState<\n    CryptoCurrencyInterface[]\n  >([]);\n\n  const updateLastCryptoValues = (\n    cryptoCurrencies: CryptoCurrencyInterface[]\n  ) => {\n    setLastCryptoValues(cryptoCurrencies);\n  };\n\n  useEffect(() => {\n    const mergedCryptoCurrenciesProviders = results.map((provider, key) => [\n      ...provider,\n      ...(cryptoCurrenciesProviders[key] ?? []),\n    ]);\n\n    setCryptoCurrenciesProviders(mergedCryptoCurrenciesProviders);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [results]);\n\n  return (\n    <Provider\n      value={{\n        results: cryptoCurrenciesProviders,\n        lastCryptoValues,\n        updateLastCryptoValues,\n      }}\n    >\n      {children}\n    </Provider>\n  );\n};\n\nexport const useCryptoCurrencyContext = () => {\n  const context = useContext(CryptoCurrencyContext);\n\n  if (!context) {\n    throw new Error(\n      \"useCryptoCurrencyContext must be used within a CryptoCurrencyProvider\"\n    );\n  }\n\n  return context;\n};\n","import Card from \"../../../../components/card\";\nimport { CryptoCurrency } from \"../../../../enums/crypto-currency.enum\";\nimport { useCryptoCurrencyContext } from \"../../context/crypto-currency.context\";\nimport { CryptoCurrencyInterface } from \"../../../../interfaces/crypto-currency.interface\";\nimport { useEffect, useMemo } from \"react\";\n\ninterface CurrencyViewerProps {\n  cryptoCurrencyName: CryptoCurrency;\n}\n\nexport default function CryptoCurrencyGrid({\n  cryptoCurrencyName,\n}: CurrencyViewerProps) {\n  const { results, updateLastCryptoValues } = useCryptoCurrencyContext();\n\n  const cryptoCurrencyProviders = useMemo(\n    () =>\n      results.map((provider) =>\n        provider.filter(\n          (cryptoCurrencyResult: CryptoCurrencyInterface) =>\n            cryptoCurrencyResult.name === cryptoCurrencyName\n        )\n      ),\n    [cryptoCurrencyName, results]\n  );\n\n  const getParsedCurrency = (value: number) => value.toLocaleString(\"es-MX\");\n\n  useEffect(() => {\n    updateLastCryptoValues(\n      cryptoCurrencyProviders.map(\n        ([{ provider, value, name, lastUpdated }]) => ({\n          provider,\n          value,\n          name,\n          lastUpdated,\n        })\n      ) as CryptoCurrencyInterface[]\n    );\n  }, [cryptoCurrencyProviders]);\n\n  return (\n    <div className=\"py-4 select-none\">\n      <div className=\"grid sm:grid-cols-3 gap-4\">\n        {cryptoCurrencyProviders.map((cryptoCurrencyProvider, key) => {\n          const [{ provider, value }] = cryptoCurrencyProvider;\n          return (\n            <Card backgroundColor=\"bg-dark-500\" key={key} className=\"px-4 py-4\">\n              <div className=\"text-yellow-300 font-bold text-2xl text-center\">\n                {getParsedCurrency(value)}\n              </div>\n              <div className=\"text-yellow-200 text-xs text-center uppercase\">\n                {provider}\n              </div>\n              <div className=\"w-full border border-yellow-400 my-4\" />\n              <div className=\"h-32 overflow-y-auto\">\n                {cryptoCurrencyProvider.map((cryptoCurrency, key) => (\n                  <div\n                    className=\"flex justify-between text-yellow-200 text-xs hover:text-yellow-400 cursor-pointer\"\n                    key={key}\n                  >\n                    <div>{cryptoCurrency.lastUpdated}</div>\n                    <div>{getParsedCurrency(cryptoCurrency.value)}</div>\n                  </div>\n                ))}\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import axios from \"axios\";\nimport { CryptoCurrencyInterface } from \"../../../../interfaces/crypto-currency.interface\";\nimport { CryptoCurrency } from \"../../../../enums/crypto-currency.enum\";\nimport moment from \"moment/moment\";\n\ninterface CoingeckoSourceResponse {\n  current_price: number;\n  last_updated: string;\n}\n\nexport default async function CoingeckoSource(): Promise<\n  CryptoCurrencyInterface[]\n> {\n  const { data } = await axios.get(\n    \"https://api.coingecko.com/api/v3/coins/markets\",\n    {\n      params: {\n        vs_currency: \"usd\",\n        ids: \"bitcoin,ethereum,ripple\",\n      },\n    }\n  );\n\n  const [BTC, ETH, XRP] = data as CoingeckoSourceResponse[];\n\n  return [\n    {\n      name: CryptoCurrency.BTC,\n      value: BTC.current_price,\n      lastUpdated: moment(BTC.last_updated).format(\"YYYY/MM/DD HH:mm:ss\"),\n    },\n    {\n      name: CryptoCurrency.ETH,\n      value: ETH.current_price,\n      lastUpdated: moment(ETH.last_updated).format(\"YYYY/MM/DD HH:mm:ss\"),\n    },\n    {\n      name: CryptoCurrency.XRP,\n      value: XRP.current_price,\n      lastUpdated: moment(XRP.last_updated).format(\"YYYY/MM/DD HH:mm:ss\"),\n    },\n  ].map((currency) => ({ ...currency, provider: \"coingecko\" }));\n}\n","import axios from \"axios\";\nimport { CryptoCurrencyInterface } from \"../../../../interfaces/crypto-currency.interface\";\nimport { CryptoCurrency } from \"../../../../enums/crypto-currency.enum\";\nimport moment from \"moment/moment\";\n\ntype Currency = {\n  last_price: string;\n};\n\ninterface StormGainSourceResponse {\n  BTC_USDT: Currency;\n  ETH_USDT: Currency;\n  XRP_USDT: Currency;\n}\n\nexport default async function StormGainSource(): Promise<\n  CryptoCurrencyInterface[]\n> {\n  const { data } = await axios.get(\n    \"https://public-api.stormgain.com/api/v1/ticker\"\n  );\n\n  const { BTC_USDT, ETH_USDT, XRP_USDT } = data as StormGainSourceResponse;\n\n  return [\n    {\n      name: CryptoCurrency.BTC,\n      value: parseFloat(BTC_USDT.last_price),\n      lastUpdated: moment(new Date()).format(\"YYYY/MM/DD HH:mm:ss\"),\n    },\n    {\n      name: CryptoCurrency.ETH,\n      value: parseFloat(ETH_USDT.last_price),\n      lastUpdated: moment(new Date()).format(\"YYYY/MM/DD HH:mm:ss\"),\n    },\n    {\n      name: CryptoCurrency.XRP,\n      value: parseFloat(XRP_USDT.last_price),\n      lastUpdated: moment(new Date()).format(\"YYYY/MM/DD HH:mm:ss\"),\n    },\n  ].map((currency) => ({ ...currency, provider: \"storm-gain\" }));\n}\n","import axios from \"axios\";\nimport { CryptoCurrencyInterface } from \"../../../../interfaces/crypto-currency.interface\";\nimport { CryptoCurrency } from \"../../../../enums/crypto-currency.enum\";\nimport moment from \"moment/moment\";\n\ntype Currency = {\n  USD: number;\n};\n\ninterface CryptoCompareSourceResponse {\n  BTC: Currency;\n  ETH: Currency;\n  XRP: Currency;\n}\n\nexport default async function CryptoCompareSource(): Promise<\n  CryptoCurrencyInterface[]\n> {\n  const { data } = await axios.get(\n    \"https://min-api.cryptocompare.com/data/pricemulti\",\n    {\n      params: {\n        tsyms: \"USD\",\n        fsyms: \"BTC,ETH,XRP\",\n      },\n    }\n  );\n\n  const { BTC, ETH, XRP } = data as CryptoCompareSourceResponse;\n\n  return [\n    {\n      name: CryptoCurrency.BTC,\n      value: BTC.USD,\n      lastUpdated: moment(new Date()).format(\"YYYY/MM/DD HH:mm:ss\"),\n    },\n    {\n      name: CryptoCurrency.ETH,\n      value: ETH.USD,\n      lastUpdated: moment(new Date()).format(\"YYYY/MM/DD HH:mm:ss\"),\n    },\n    {\n      name: CryptoCurrency.XRP,\n      value: XRP.USD,\n      lastUpdated: moment(new Date()).format(\"YYYY/MM/DD HH:mm:ss\"),\n    },\n  ].map((currency) => ({ ...currency, provider: \"crypto-compare\" }));\n}\n","import { useState } from \"react\";\nimport { Error } from \"../../../enums/error.enum\";\nimport { CryptoCurrencyInterface } from \"../../../interfaces/crypto-currency.interface\";\nimport CoingeckoSource from \"./sources/coingecko.source\";\nimport StormGainSource from \"./sources/storm-gain.source\";\nimport CryptoCompareSource from \"./sources/crypto-compare.source\";\nimport useInterval from \"../use-interval\";\n\nexport default function useCryptoApi() {\n  const [error, setError] = useState<Error | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [results, setResults] = useState<CryptoCurrencyInterface[][]>([]);\n\n  useInterval({\n    callback: async () => {\n      try {\n        setError(null);\n\n        const data = (await Promise.all([\n          CoingeckoSource(),\n          CryptoCompareSource(),\n          StormGainSource(),\n        ])) as CryptoCurrencyInterface[][];\n\n        setResults(data);\n      } catch (e) {\n        setError(e);\n      } finally {\n        if (isLoading) {\n          setIsLoading(false);\n        }\n      }\n    },\n    delay: 15000,\n  });\n\n  return [results, isLoading, error] as const;\n}\n","import { useEffect, useRef } from \"react\";\n\ninterface UseIntervalProps {\n  callback: () => void;\n  delay: number;\n}\n\ninterface CachedCallback {\n  current: () => void;\n}\n\nexport default function useInterval({ callback, delay }: UseIntervalProps) {\n  const savedCallback = useRef() as CachedCallback;\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    tick();\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\n\nexport default function CryptoCurrencyGridSkeleton() {\n  return (\n    <SkeletonTheme color=\"#6B7280\" highlightColor=\"#818896\">\n      <div className=\"grid sm:grid-cols-3 gap-4 py-3\">\n        {Array(3)\n          .fill(null)\n          .map((_v, key) => (\n            <Skeleton count={1} className=\"h-60\" key={key} />\n          ))}\n      </div>\n    </SkeletonTheme>\n  );\n}\n","import Card from \"../card\";\n\ninterface ErrorCardProps {\n  className?: string;\n}\n\nexport default function ErrorCard({ className }: ErrorCardProps) {\n  return (\n    <Card\n      backgroundColor=\"bg-danger-300\"\n      className={`text-red-600 ${className}`}\n    >\n      <div className=\"font-bold text-xl\">We apologize 😞</div>\n      <div className=\"font-light\">\n        An error has occurred, please try again in a few minutes\n      </div>\n    </Card>\n  );\n}\n","import Card from \"../../../../components/card\";\nimport Input from \"../../../../components/form/input\";\nimport { useCryptoCurrencyContext } from \"../../context/crypto-currency.context\";\nimport { CryptoCurrencyInterface } from \"../../../../interfaces/crypto-currency.interface\";\nimport { useState } from \"react\";\n\nexport default function CurrencyConverter() {\n  const { lastCryptoValues } = useCryptoCurrencyContext();\n  const [value, setValue] = useState<number | undefined>(undefined);\n\n  return (\n    <Card className=\"mt-4\" backgroundColor=\"bg-gray-600\">\n      <div className=\"text-gray-400 uppercase text-lg font-bold mb-2\">\n        Currency Converter\n      </div>\n      <div className=\"grid sm:grid-cols-4 gap-4\">\n        <Input value={value} onChange={setValue} title=\"MXN\" type=\"number\" />\n        {value &&\n          value > 0 &&\n          lastCryptoValues.map(\n            (lastCryptoValue: CryptoCurrencyInterface, key: number) => (\n              <div key={key} className=\"w-full break-all sm:text-center\">\n                <div\n                  className=\"text-gray-400 uppercase text-xs font-bold mb-1\"\n                  title={`CURRENT VALUE: ${lastCryptoValue.value.toString()}`}\n                >\n                  {lastCryptoValue.provider}\n                </div>\n                <div className=\"text-yellow-200 font-bold mt-3\">\n                  {(lastCryptoValue.value * value).toFixed(2)}\n                </div>\n              </div>\n            )\n          )}\n      </div>\n    </Card>\n  );\n}\n","import { ReactNode } from \"react\";\n\ninterface ActionButton {\n  title: string;\n  action: () => void;\n}\n\ninterface ModalProps {\n  visible: boolean;\n  title: ReactNode | string;\n  primaryButton: ActionButton;\n  secondaryButton?: ActionButton | null;\n  subtitle?: ReactNode | string;\n  icon?: any;\n}\n\nexport default function Modal({\n  visible,\n  title,\n  subtitle,\n  primaryButton,\n  secondaryButton,\n  icon,\n}: ModalProps) {\n  if (!visible) {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"min-w-screen h-screen animated fadeIn faster fixed left-0 top-0 flex justify-center items-center inset-0 z-50 outline-none focus:outline-none bg-no-repeat bg-center bg-cover px-4 sm:px-0\"\n      id=\"modal-id\"\n    >\n      <div className=\"absolute bg-black opacity-80 inset-0 z-0\" />\n      <div className=\"w-full  max-w-lg p-5 relative mx-auto my-auto rounded-xl shadow-lg  bg-white \">\n        <div className=\"\">\n          <div className=\"text-center p-5 flex-auto justify-center\">\n            {icon && <div className=\"flex justify-center\">{icon}</div>}\n            <h2 className=\"text-xl font-bold py-4 \">{title}</h2>\n            {subtitle && (\n              <p className=\"text-sm text-gray-500 px-8\">{subtitle}</p>\n            )}\n          </div>\n          <div className=\"p-3  mt-2 text-center space-x-4 md:block\">\n            {secondaryButton && (\n              <button\n                className=\"mb-2 md:mb-0 bg-white px-5 py-2 text-xs shadow-sm font-medium tracking-wider border text-gray-600 rounded-full hover:shadow-lg hover:bg-gray-100 uppercase\"\n                onClick={secondaryButton.action}\n              >\n                {secondaryButton.title}\n              </button>\n            )}\n            <button\n              className=\"mb-2 md:mb-0 bg-yellow-400 border border-yellow-400 px-5 py-2 text-xs shadow-sm font-medium tracking-wider text-white rounded-full hover:shadow-lg hover:bg-yellow-500 uppercase\"\n              onClick={primaryButton.action}\n            >\n              {primaryButton.title}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","export default function LogoutIcon({ size = 24 }: { size?: number }) {\n  return (\n    <svg\n      className=\"MuiSvgIcon-root jss117 MuiSvgIcon-fontSizeLarge\"\n      focusable=\"false\"\n      viewBox=\"0 0 24 24\"\n      aria-hidden=\"true\"\n      height={size}\n      width={size}\n    >\n      <path d=\"M10.09 15.59L11.5 17l5-5-5-5-1.41 1.41L12.67 11H3v2h9.67l-2.58 2.59zM19 3H5c-1.11 0-2 .9-2 2v4h2V5h14v14H5v-4H3v4c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"></path>\n    </svg>\n  );\n}\n","import Modal from \"../modal\";\nimport LogoutIcon from \"../../assets/icons/logout.icon\";\nimport { useState } from \"react\";\nimport { useAppContext } from \"../../contexts/app.context\";\n\nexport default function Logout() {\n  const { logout } = useAppContext();\n  const [isModalOpened, setIsModalOpened] = useState(false);\n\n  return (\n    <>\n      <div className=\"grid grid-cols-3 gap-1 w-20\">\n        <div\n          className=\"bg-red-400 w-6 h-6 rounded-full cursor-pointer\"\n          onClick={() => setIsModalOpened(true)}\n        />\n        <div\n          className=\"bg-yellow-300 w-6 h-6 rounded-full cursor-pointer opacity-50\"\n          title=\"Disabled feature\"\n        />\n        <div\n          className=\"bg-green-300 w-6 h-6 rounded-full cursor-pointer opacity-50\"\n          title=\"Disabled feature\"\n        />\n      </div>\n      <Modal\n        visible={isModalOpened}\n        title=\"Are you sure you want to leave?\"\n        subtitle=\"Do you really want to logout from your account?\"\n        primaryButton={{\n          title: \"Logout\",\n          action: logout,\n        }}\n        secondaryButton={{\n          title: \"Cancel\",\n          action: () => setIsModalOpened(false),\n        }}\n        icon={<LogoutIcon size={50} />}\n      />\n    </>\n  );\n}\n","interface UserIconProps {\n  size?: number;\n  fill?: string;\n}\n\nexport default function UserIcon({\n  size = 24,\n  fill = \"#6b7280\",\n}: UserIconProps) {\n  return (\n    <svg\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      x=\"0px\"\n      y=\"0px\"\n      viewBox=\"0 0 45.532 45.532\"\n      height={size}\n      width={size}\n    >\n      <g fill={fill}>\n        <path\n          d=\"M22.766,0.001C10.194,0.001,0,10.193,0,22.766s10.193,22.765,22.766,22.765c12.574,0,22.766-10.192,22.766-22.765\n\t\tS35.34,0.001,22.766,0.001z M22.766,6.808c4.16,0,7.531,3.372,7.531,7.53c0,4.159-3.371,7.53-7.531,7.53\n\t\tc-4.158,0-7.529-3.371-7.529-7.53C15.237,10.18,18.608,6.808,22.766,6.808z M22.761,39.579c-4.149,0-7.949-1.511-10.88-4.012\n\t\tc-0.714-0.609-1.126-1.502-1.126-2.439c0-4.217,3.413-7.592,7.631-7.592h8.762c4.219,0,7.619,3.375,7.619,7.592\n\t\tc0,0.938-0.41,1.829-1.125,2.438C30.712,38.068,26.911,39.579,22.761,39.579z\"\n        />\n      </g>\n    </svg>\n  );\n}\n","import { useAppContext } from \"../../contexts/app.context\";\nimport UserIcon from \"../../assets/icons/user.icon\";\nimport Modal from \"../modal\";\nimport { useState } from \"react\";\n\nexport default function UserInformation() {\n  const { user } = useAppContext();\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\n\n  return (\n    <>\n      <div className=\"flex items-center\">\n        <div className=\"hidden sm:flex text-sm text-gray-400 capitalize\">\n          <div>{user?.name}</div>\n          <div className=\"ml-1\">{user?.lastname}</div>\n        </div>\n        <div\n          className=\"ml-2 cursor-pointer\"\n          onClick={() => setIsModalVisible(true)}\n        >\n          <UserIcon />\n        </div>\n      </div>\n      <Modal\n        visible={isModalVisible}\n        title=\"User Information\"\n        subtitle={\n          <div className=\"grid sm:grid-cols-2 gap-4\">\n            <div className=\"flex items-center sm:col-span-2\">\n              <div className=\"text-lg font-bold capitalize\">{user?.name}</div>\n              <div className=\"text-lg font-bold capitalize ml-1\">\n                {user?.lastname}\n              </div>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"text-sm\">{user?.email}</div>\n            </div>\n            <div className=\"flex items-center\">\n              <div>Phone:</div>\n              <div className=\"ml-1\">{user?.phoneNumber}</div>\n            </div>\n          </div>\n        }\n        primaryButton={{\n          title: \"close\",\n          action: () => setIsModalVisible(false),\n        }}\n      />\n    </>\n  );\n}\n","import Logout from \"../logout\";\nimport UserInformation from \"../user-information\";\n\nexport default function Navbar() {\n  return (\n    <div className=\"flex justify-between\">\n      <Logout />\n      <UserInformation />\n    </div>\n  );\n}\n","import Card from \"../../components/card\";\nimport withAuthenticatedLogin from \"../../components/with-authenticated-login\";\nimport Tabs from \"../../components/tabs\";\nimport CryptoCurrencyGrid from \"./components/crypto-currency-grid\";\nimport { CryptoCurrency } from \"../../enums/crypto-currency.enum\";\nimport useCryptoApi from \"../../components/custom-hooks/use-crypto-api\";\nimport { CryptoCurrencyProvider } from \"./context/crypto-currency.context\";\nimport CryptoCurrencyGridSkeleton from \"./components/crypto-currency-grid/skeleton\";\nimport ErrorCard from \"../../components/error-card\";\nimport CurrencyConverter from \"./components/currency-converter\";\nimport Navbar from \"../../components/navbar\";\n\nconst Cryptocurrencies = () => {\n  const [results, isLoading, error] = useCryptoApi();\n\n  const cryptoCurrencies = [\n    CryptoCurrency.BTC,\n    CryptoCurrency.ETH,\n    CryptoCurrency.XRP,\n  ];\n\n  return (\n    <CryptoCurrencyProvider results={results}>\n      <div className=\"flex items-center justify-center min-h-screen p-4\">\n        <Card>\n          <Navbar />\n          {error ? (\n            <ErrorCard className=\"mt-6\" />\n          ) : (\n            <Tabs className=\"mt-6\" tabs={cryptoCurrencies}>\n              {cryptoCurrencies.map((cryptoCurrency, key) =>\n                isLoading ? (\n                  <CryptoCurrencyGridSkeleton key={key} />\n                ) : (\n                  <CryptoCurrencyGrid\n                    cryptoCurrencyName={cryptoCurrency}\n                    key={key}\n                  />\n                )\n              )}\n            </Tabs>\n          )}\n          <CurrencyConverter />\n        </Card>\n      </div>\n    </CryptoCurrencyProvider>\n  );\n};\n\nexport default withAuthenticatedLogin(Cryptocurrencies);\n","import Login from \"./login\";\nimport Cryptocurrencies from \"./cryptocurrencies\";\n\nconst routes = [\n  {\n    path: \"/login\",\n    component: Login,\n  },\n  {\n    path: \"/cryptocurrencies\",\n    component: Cryptocurrencies,\n  },\n];\n\nexport default routes;\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Route, Switch } from \"react-router\";\n\nimport routes from \"./routes\";\nimport Login from \"./login\";\n\nexport default function Pages() {\n  return (\n    <Router>\n      <Switch>\n        {routes.map(({ path, component }) => (\n          <Route path={path} exact component={component} key={path} />\n        ))}\n        <Route path=\"/\" component={Login} />\n      </Switch>\n    </Router>\n  );\n}\n","import { ReactNode } from \"react\";\n\nexport default function Background({ children }: { children: ReactNode }) {\n  return <div className=\"bg-yellow-100 w-full min-h-screen\">{children}</div>;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Pages from \"./pages\";\nimport \"./assets/css/index.css\";\nimport { AppProvider } from \"./contexts/app.context\";\nimport Background from \"./components/background\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <Background>\n        <Pages />\n      </Background>\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}